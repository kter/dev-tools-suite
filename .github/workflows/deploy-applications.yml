name: Deploy Applications

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prd
      tool:
        description: 'Specific tool to deploy (leave empty for all changed tools)'
        required: false
        type: string
      force_deploy:
        description: 'Force deploy all tools (ignore change detection)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-tools: ${{ steps.changes.outputs.tools }}
      hash-generator: ${{ steps.changes.outputs.hash-generator }}
      qr-generator: ${{ steps.changes.outputs.qr-generator }}
      unix-time-converter: ${{ steps.changes.outputs.unix-time-converter }}
      password-generator: ${{ steps.changes.outputs.password-generator }}
      ip-calculator: ${{ steps.changes.outputs.ip-calculator }}
      markdown-preview: ${{ steps.changes.outputs.markdown-preview }}
      placeholder-generator: ${{ steps.changes.outputs.placeholder-generator }}
      ip-info: ${{ steps.changes.outputs.ip-info }}
      timezone-converter: ${{ steps.changes.outputs.timezone-converter }}
      string-converter: ${{ steps.changes.outputs.string-converter }}
      code-diff: ${{ steps.changes.outputs.code-diff }}
      mic-test: ${{ steps.changes.outputs.mic-test }}
      json-yaml-converter: ${{ steps.changes.outputs.json-yaml-converter }}
      jwt-decoder: ${{ steps.changes.outputs.jwt-decoder }}
      regex-tester: ${{ steps.changes.outputs.regex-tester }}
      lorem-ipsum-generator: ${{ steps.changes.outputs.lorem-ipsum-generator }}
      landing-page: ${{ steps.changes.outputs.landing-page }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed tools
        id: changes
        run: |
          echo "Detecting changes in tools directories..."
          
          # Initialize variables
          CHANGED_TOOLS=""
          
          # Function to check if tool has changes
          check_tool_changes() {
            local tool_name="$1"
            local tool_path="tools/$tool_name"
            
            # For manual workflow dispatch with specific tool, always deploy that tool
            if [[ "${{ github.event.inputs.tool }}" == "$tool_name" ]]; then
              echo "$tool_name=true" >> $GITHUB_OUTPUT
              CHANGED_TOOLS="$CHANGED_TOOLS $tool_name"
              echo "✅ $tool_name: Manual deployment requested"
              return
            fi
            
            # For force deploy, deploy all tools
            if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
              echo "$tool_name=true" >> $GITHUB_OUTPUT
              CHANGED_TOOLS="$CHANGED_TOOLS $tool_name"
              echo "🔄 $tool_name: Force deploy enabled"
              return
            fi
            
            # Check for changes in the tool directory
            if [[ "${{ github.event_name }}" == "push" ]]; then
              # For push events, check if files changed in the last commit
              if git diff --name-only HEAD~1 HEAD | grep -q "^$tool_path/"; then
                echo "$tool_name=true" >> $GITHUB_OUTPUT
                CHANGED_TOOLS="$CHANGED_TOOLS $tool_name"
                echo "✅ $tool_name: Changes detected"
              else
                echo "$tool_name=false" >> $GITHUB_OUTPUT
                echo "⏭️  $tool_name: No changes detected"
              fi
            else
              # For workflow_dispatch without specific tool, deploy all (backwards compatibility)
              if [[ "${{ github.event.inputs.tool }}" == "" ]]; then
                echo "$tool_name=true" >> $GITHUB_OUTPUT
                CHANGED_TOOLS="$CHANGED_TOOLS $tool_name"
                echo "🔄 $tool_name: Manual workflow dispatch (all tools)"
              else
                echo "$tool_name=false" >> $GITHUB_OUTPUT
                echo "⏭️  $tool_name: Not selected for manual deployment"
              fi
            fi
          }
          
          # Check each tool
          check_tool_changes "hash-generator"
          check_tool_changes "qr-generator"
          check_tool_changes "unix-time-converter"
          check_tool_changes "password-generator"
          check_tool_changes "ip-calculator"
          check_tool_changes "markdown-preview"
          check_tool_changes "placeholder-generator"
          check_tool_changes "ip-info"
          check_tool_changes "timezone-converter"
          check_tool_changes "string-converter"
          check_tool_changes "code-diff"
          check_tool_changes "mic-test"
          check_tool_changes "json-yaml-converter"
          check_tool_changes "jwt-decoder"
          check_tool_changes "regex-tester"
          check_tool_changes "lorem-ipsum-generator"
          check_tool_changes "landing-page"
          
          # Output summary
          echo "tools=$CHANGED_TOOLS" >> $GITHUB_OUTPUT
          echo "Changed tools:$CHANGED_TOOLS"

  deploy:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: 
          - name: hash-generator
          - name: qr-generator
          - name: unix-time-converter
          - name: password-generator
          - name: ip-calculator
          - name: markdown-preview
          - name: placeholder-generator
          - name: ip-info
          - name: timezone-converter
          - name: string-converter
          - name: code-diff
          - name: mic-test
          - name: json-yaml-converter
          - name: jwt-decoder
          - name: regex-tester
          - name: lorem-ipsum-generator
          - name: landing-page
    
    environment: ${{ (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prd') && 'prd' || 'dev' }}
    env:
      ENVIRONMENT: ${{ (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prd') && 'prd' || 'dev' }}
      TOOL_NAME: ${{ matrix.tool.name }}
    
    steps:
      - name: Skip if no changes detected for this tool
        run: |
          TOOL_CHANGED="${{ needs.detect-changes.outputs[matrix.tool.name] }}"
          if [[ "$TOOL_CHANGED" != "true" ]]; then
            echo "⏭️  Skipping ${{ matrix.tool.name }} - no changes detected"
            echo "SKIP_DEPLOYMENT=true" >> $GITHUB_ENV
          else
            echo "🚀 Deploying ${{ matrix.tool.name }} - changes detected"
            echo "SKIP_DEPLOYMENT=false" >> $GITHUB_ENV
          fi

      - name: Checkout code
        if: env.SKIP_DEPLOYMENT != 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: env.SKIP_DEPLOYMENT != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Configure AWS credentials
        if: env.SKIP_DEPLOYMENT != 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install tool dependencies
        if: env.SKIP_DEPLOYMENT != 'true'
        run: |
          # Set environment variables for CI compatibility
          export CI=true
          
          # Navigate to tool directory and install dependencies
          echo "Installing dependencies for ${{ matrix.tool.name }}..."
          cd tools/${{ matrix.tool.name }}
          
          # Install dependencies
          npm ci
          
          # Verify installation
          echo "Dependencies installed successfully"
          echo "Testing nuxi with npx:"
          npx nuxi --version
      - name: Build application
        if: env.SKIP_DEPLOYMENT != 'true'
        run: |
          # Set environment variables for build
          export NODE_ENV=production
          export CI=true
          export NITRO_PRESET=static
          
          echo "Building ${{ matrix.tool.name }} application..."
          echo "Current directory: $(pwd)"
          echo "Tool directory: tools/${{ matrix.tool.name }}"
          
          # Navigate to tool directory
          cd tools/${{ matrix.tool.name }}
          
          # Run nuxt generate using npm script
          echo "Running nuxt generate for ${{ matrix.tool.name }}..."
          npx nuxi generate
          
          # Verify build output
          echo "Build completed successfully!"
          if [ -d ".output/public" ]; then
            echo "Build output directory exists"
            echo "Build output contents:"
            ls -la .output/public/
          else
            echo "❌ Build output directory not found"
            ls -la .output/ || echo ".output directory not found"
            exit 1
          fi

      - name: Get S3 bucket name
        if: env.SKIP_DEPLOYMENT != 'true'
        id: bucket
        run: |
          STACK_NAME="DevToolsStack-${{ env.ENVIRONMENT }}"
          if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
            BUCKET_OUTPUT_KEY="landingpagebucketname"
          else
            # Remove hyphens from tool name for output key
            TOOL_NAME_CLEAN=$(echo "${{ matrix.tool.name }}" | sed 's/-//g')
            BUCKET_OUTPUT_KEY="${TOOL_NAME_CLEAN}bucketname"
          fi
          
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='$BUCKET_OUTPUT_KEY'].OutputValue" \
            --output text)
          
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "Found S3 bucket: $BUCKET_NAME"

      - name: Deploy to S3
        if: env.SKIP_DEPLOYMENT != 'true'
        run: |
          echo "Deploying to S3 bucket: ${{ steps.bucket.outputs.bucket_name }}"
          cd tools/${{ matrix.tool.name }}
          aws s3 sync .output/public/ s3://${{ steps.bucket.outputs.bucket_name }}/ --delete
          echo "Successfully deployed ${{ matrix.tool.name }} to ${{ env.ENVIRONMENT }} environment"

      - name: Get CloudFront distribution ID
        if: env.SKIP_DEPLOYMENT != 'true'
        id: cloudfront
        run: |
          STACK_NAME="DevToolsStack-${{ env.ENVIRONMENT }}"
          if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
            OUTPUT_KEY="landingpagedistributionid"
          else
            # Remove hyphens from tool name for output key
            TOOL_NAME_CLEAN=$(echo "${{ matrix.tool.name }}" | sed 's/-//g')
            OUTPUT_KEY="${TOOL_NAME_CLEAN}distributionid"
          fi
          
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" \
            --output text)
          
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "Found CloudFront distribution: $DISTRIBUTION_ID"

      - name: Invalidate CloudFront cache
        if: env.SKIP_DEPLOYMENT != 'true'
        run: |
          echo "Invalidating CloudFront distribution: ${{ steps.cloudfront.outputs.distribution_id }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} \
            --paths "/*"
          echo "CloudFront cache invalidation initiated"

      - name: Output deployment info
        run: |
          if [[ "${{ env.SKIP_DEPLOYMENT }}" == "true" ]]; then
            echo "## ⏭️ Deployment Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- **Tool**: ${{ matrix.tool.name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Reason**: No changes detected in tool directory" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
            echo "- **Tool**: ${{ matrix.tool.name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
            echo "- **S3 Bucket**: ${{ steps.bucket.outputs.bucket_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **CloudFront**: ${{ steps.cloudfront.outputs.distribution_id }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ env.ENVIRONMENT }}" == "prd" ]]; then
              if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
                echo "- **URL**: https://devtools.site" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **URL**: https://${{ matrix.tool.name }}.devtools.site" >> $GITHUB_STEP_SUMMARY
              fi
            else
              if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
                echo "- **URL**: https://dev.devtools.site" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **URL**: https://${{ matrix.tool.name }}.dev.devtools.site" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
