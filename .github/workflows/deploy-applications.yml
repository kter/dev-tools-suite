name: Deploy Applications

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prd
      tool:
        description: 'Specific tool to deploy (leave empty for all changed tools)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: 
          - name: hash-generator
          - name: qr-generator
          - name: unix-time-converter
          - name: password-generator
          - name: landing-page
    
    environment: ${{ (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prd') && 'prd' || 'dev' }}
    env:
      ENVIRONMENT: ${{ (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prd') && 'prd' || 'dev' }}
      TOOL_NAME: ${{ matrix.tool.name }}
    
    steps:
      - name: Skip if specific tool requested and this is not it
        if: ${{ github.event.inputs.tool != '' && github.event.inputs.tool != matrix.tool.name }}
        run: |
          echo "Skipping ${{ matrix.tool.name }} - not the requested tool"
          exit 0

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install workspace dependencies
        run: |
          # Debug: Show current directory and workspace info
          echo "Current directory: $(pwd)"
          echo "Building tool: ${{ matrix.tool.name }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Set environment variables for CI compatibility
          export NODE_ENV=production
          export CI=true
          
          # Install all workspace dependencies from root (skip postinstall scripts initially)
          echo "Installing workspace dependencies..."
          npm ci --ignore-scripts
          
          # Manually run postinstall for workspace root only (avoiding individual tool postinstalls)
          echo "Running workspace postinstall scripts..."
          npm run postinstall --if-present || echo "No root postinstall script found"
          
          # Ensure nuxt is properly installed by rebuilding packages
          echo "Ensuring nuxt is available..."
          npm rebuild nuxt --if-present
          
          # Verify nuxt/nuxi installation
          echo "Verifying nuxt installation..."
          if [ -f "node_modules/.bin/nuxi" ]; then
            echo "✅ nuxi binary found at ./node_modules/.bin/nuxi"
            ./node_modules/.bin/nuxi --version
          elif [ -f "node_modules/.bin/nuxt" ]; then
            echo "✅ nuxt binary found at ./node_modules/.bin/nuxt"
            ./node_modules/.bin/nuxt --version
          else
            echo "❌ Neither nuxi nor nuxt binary found, listing available binaries..."
            ls -la node_modules/.bin/ || echo "No .bin directory found"
            echo "Checking for nuxt packages..."
            find node_modules -name "nuxi.mjs" -type f || echo "No nuxi.mjs found"
            find node_modules -name "nuxt.mjs" -type f || echo "No nuxt.mjs found"
            exit 1
          fi
      - name: Build application
        working-directory: tools/${{ matrix.tool.name }}
        run: |
          # Set environment variables for build
          export NODE_ENV=production
          export CI=true
          export NITRO_PRESET=static
          
          echo "Building ${{ matrix.tool.name }} application..."
          echo "Working directory: $(pwd)"
          
          # Debug: Verify nuxt/nuxi binary location
          echo "Checking nuxt binary location..."
          if [ -f "../../node_modules/.bin/nuxi" ]; then
            echo "Root nuxi binary found:"
            ls -la ../../node_modules/.bin/nuxi
            echo "Nuxi version:"
            ../../node_modules/.bin/nuxi --version
            NUXT_COMMAND="../../node_modules/.bin/nuxi"
          elif [ -f "../../node_modules/.bin/nuxt" ]; then
            echo "Root nuxt binary found:"
            ls -la ../../node_modules/.bin/nuxt
            echo "Nuxt version:"
            ../../node_modules/.bin/nuxt --version
            NUXT_COMMAND="../../node_modules/.bin/nuxt"
          else
            echo "❌ Neither nuxi nor nuxt binary found!"
            exit 1
          fi
          
          # Run nuxt prepare using detected binary
          echo "Running nuxt prepare..."
          $NUXT_COMMAND prepare
          
          # Generate static site using detected binary
          echo "Running nuxt generate..."
          $NUXT_COMMAND generate
          
          # Verify build output
          echo "Build completed successfully!"
          if [ -d ".output/public" ]; then
            echo "Build output directory exists"
            echo "Build output contents:"
            ls -la .output/public/
          else
            echo "❌ Build output directory not found"
            ls -la .output/ || echo ".output directory not found"
            exit 1
          fi

      - name: Get S3 bucket name
        id: bucket
        run: |
          STACK_NAME="DevToolsStack-${{ env.ENVIRONMENT }}"
          if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
            BUCKET_OUTPUT_KEY="landingpagebucketname"
          else
            # Remove hyphens from tool name for output key
            TOOL_NAME_CLEAN=$(echo "${{ matrix.tool.name }}" | sed 's/-//g')
            BUCKET_OUTPUT_KEY="${TOOL_NAME_CLEAN}bucketname"
          fi
          
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='$BUCKET_OUTPUT_KEY'].OutputValue" \
            --output text)
          
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "Found S3 bucket: $BUCKET_NAME"

      - name: Deploy to S3
        working-directory: tools/${{ matrix.tool.name }}
        run: |
          echo "Deploying to S3 bucket: ${{ steps.bucket.outputs.bucket_name }}"
          aws s3 sync .output/public/ s3://${{ steps.bucket.outputs.bucket_name }}/ --delete
          echo "Successfully deployed ${{ matrix.tool.name }} to ${{ env.ENVIRONMENT }} environment"

      - name: Get CloudFront distribution ID
        id: cloudfront
        run: |
          STACK_NAME="DevToolsStack-${{ env.ENVIRONMENT }}"
          if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
            OUTPUT_KEY="landingpagedistributionid"
          else
            # Remove hyphens from tool name for output key
            TOOL_NAME_CLEAN=$(echo "${{ matrix.tool.name }}" | sed 's/-//g')
            OUTPUT_KEY="${TOOL_NAME_CLEAN}distributionid"
          fi
          
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" \
            --output text)
          
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "Found CloudFront distribution: $DISTRIBUTION_ID"

      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront distribution: ${{ steps.cloudfront.outputs.distribution_id }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} \
            --paths "/*"
          echo "CloudFront cache invalidation initiated"

      - name: Output deployment info
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tool**: ${{ matrix.tool.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${{ steps.bucket.outputs.bucket_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront**: ${{ steps.cloudfront.outputs.distribution_id }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ env.ENVIRONMENT }}" == "prd" ]]; then
            if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
              echo "- **URL**: https://devtools.site" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **URL**: https://${{ matrix.tool.name }}.devtools.site" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [[ "${{ matrix.tool.name }}" == "landing-page" ]]; then
              echo "- **URL**: https://dev.devtools.site" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **URL**: https://${{ matrix.tool.name }}.dev.devtools.site" >> $GITHUB_STEP_SUMMARY
            fi
          fi
