#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const dev_tools_stack_1 = require("../lib/dev-tools-stack");
const certificate_stack_1 = require("../lib/certificate-stack");
const github_actions_stack_1 = require("../lib/github-actions-stack");
const app = new cdk.App();
const environment = app.node.tryGetContext('environment') || 'dev';
const config = {
    dev: {
        domain: 'dev.devtools.site',
        hostedZoneId: 'Z10172453BI2WPR9N2H36',
        env: {
            region: 'ap-northeast-1'
        }
    },
    prd: {
        domain: 'devtools.site',
        hostedZoneId: 'Z07774093R2W7AB97P21C',
        env: {
            region: 'ap-northeast-1'
        }
    }
};
// Certificate stack in us-east-1 for CloudFront
const certificateStack = new certificate_stack_1.CertificateStack(app, `CertificateStack-${environment}`, {
    env: { region: 'us-east-1' },
    domain: config[environment].domain,
    hostedZoneId: config[environment].hostedZoneId
});
// Main stack with application resources
const devToolsStack = new dev_tools_stack_1.DevToolsStack(app, `DevToolsStack-${environment}`, {
    env: config[environment].env,
    domain: config[environment].domain,
    hostedZoneId: config[environment].hostedZoneId,
    certificateArn: certificateStack.certificate.certificateArn,
    environment,
    crossRegionReferences: true
});
devToolsStack.addDependency(certificateStack);
// GitHub Actions IAM Stack
const githubActionsStack = new github_actions_stack_1.GitHubActionsStack(app, `GitHubActionsStack-${environment}`, {
    env: config[environment].env,
    environment: environment,
    githubRepo: 'kter/dev-tools-suite'
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFDbkMsNERBQXVEO0FBQ3ZELGdFQUE0RDtBQUM1RCxzRUFBaUU7QUFFakUsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDO0FBRW5FLE1BQU0sTUFBTSxHQUFHO0lBQ2IsR0FBRyxFQUFFO1FBQ0gsTUFBTSxFQUFFLG1CQUFtQjtRQUMzQixZQUFZLEVBQUUsdUJBQXVCO1FBQ3JDLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxnQkFBZ0I7U0FDekI7S0FDRjtJQUNELEdBQUcsRUFBRTtRQUNILE1BQU0sRUFBRSxlQUFlO1FBQ3ZCLFlBQVksRUFBRSx1QkFBdUI7UUFDckMsR0FBRyxFQUFFO1lBQ0gsTUFBTSxFQUFFLGdCQUFnQjtTQUN6QjtLQUNGO0NBQ0YsQ0FBQztBQUVGLGdEQUFnRDtBQUNoRCxNQUFNLGdCQUFnQixHQUFHLElBQUksb0NBQWdCLENBQUMsR0FBRyxFQUFFLG9CQUFvQixXQUFXLEVBQUUsRUFBRTtJQUNwRixHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFO0lBQzVCLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBa0MsQ0FBQyxDQUFDLE1BQU07SUFDekQsWUFBWSxFQUFFLE1BQU0sQ0FBQyxXQUFrQyxDQUFDLENBQUMsWUFBWTtDQUN0RSxDQUFDLENBQUM7QUFFSCx3Q0FBd0M7QUFDeEMsTUFBTSxhQUFhLEdBQUcsSUFBSSwrQkFBYSxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsV0FBVyxFQUFFLEVBQUU7SUFDM0UsR0FBRyxFQUFFLE1BQU0sQ0FBQyxXQUFrQyxDQUFDLENBQUMsR0FBRztJQUNuRCxNQUFNLEVBQUUsTUFBTSxDQUFDLFdBQWtDLENBQUMsQ0FBQyxNQUFNO0lBQ3pELFlBQVksRUFBRSxNQUFNLENBQUMsV0FBa0MsQ0FBQyxDQUFDLFlBQVk7SUFDckUsY0FBYyxFQUFFLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxjQUFjO0lBQzNELFdBQVc7SUFDWCxxQkFBcUIsRUFBRSxJQUFJO0NBQzVCLENBQUMsQ0FBQztBQUVILGFBQWEsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUU5QywyQkFBMkI7QUFDM0IsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHlDQUFrQixDQUFDLEdBQUcsRUFBRSxzQkFBc0IsV0FBVyxFQUFFLEVBQUU7SUFDMUYsR0FBRyxFQUFFLE1BQU0sQ0FBQyxXQUFrQyxDQUFDLENBQUMsR0FBRztJQUNuRCxXQUFXLEVBQUUsV0FBNEI7SUFDekMsVUFBVSxFQUFFLHNCQUFzQjtDQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgRGV2VG9vbHNTdGFjayB9IGZyb20gJy4uL2xpYi9kZXYtdG9vbHMtc3RhY2snO1xuaW1wb3J0IHsgQ2VydGlmaWNhdGVTdGFjayB9IGZyb20gJy4uL2xpYi9jZXJ0aWZpY2F0ZS1zdGFjayc7XG5pbXBvcnQgeyBHaXRIdWJBY3Rpb25zU3RhY2sgfSBmcm9tICcuLi9saWIvZ2l0aHViLWFjdGlvbnMtc3RhY2snO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBlbnZpcm9ubWVudCA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2Vudmlyb25tZW50JykgfHwgJ2Rldic7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgZGV2OiB7XG4gICAgZG9tYWluOiAnZGV2LmRldnRvb2xzLnNpdGUnLFxuICAgIGhvc3RlZFpvbmVJZDogJ1oxMDE3MjQ1M0JJMldQUjlOMkgzNicsXG4gICAgZW52OiB7XG4gICAgICByZWdpb246ICdhcC1ub3J0aGVhc3QtMSdcbiAgICB9XG4gIH0sXG4gIHByZDoge1xuICAgIGRvbWFpbjogJ2RldnRvb2xzLnNpdGUnLCBcbiAgICBob3N0ZWRab25lSWQ6ICdaMDc3NzQwOTNSMlc3QUI5N1AyMUMnLFxuICAgIGVudjoge1xuICAgICAgcmVnaW9uOiAnYXAtbm9ydGhlYXN0LTEnXG4gICAgfVxuICB9XG59O1xuXG4vLyBDZXJ0aWZpY2F0ZSBzdGFjayBpbiB1cy1lYXN0LTEgZm9yIENsb3VkRnJvbnRcbmNvbnN0IGNlcnRpZmljYXRlU3RhY2sgPSBuZXcgQ2VydGlmaWNhdGVTdGFjayhhcHAsIGBDZXJ0aWZpY2F0ZVN0YWNrLSR7ZW52aXJvbm1lbnR9YCwge1xuICBlbnY6IHsgcmVnaW9uOiAndXMtZWFzdC0xJyB9LFxuICBkb21haW46IGNvbmZpZ1tlbnZpcm9ubWVudCBhcyBrZXlvZiB0eXBlb2YgY29uZmlnXS5kb21haW4sXG4gIGhvc3RlZFpvbmVJZDogY29uZmlnW2Vudmlyb25tZW50IGFzIGtleW9mIHR5cGVvZiBjb25maWddLmhvc3RlZFpvbmVJZFxufSk7XG5cbi8vIE1haW4gc3RhY2sgd2l0aCBhcHBsaWNhdGlvbiByZXNvdXJjZXNcbmNvbnN0IGRldlRvb2xzU3RhY2sgPSBuZXcgRGV2VG9vbHNTdGFjayhhcHAsIGBEZXZUb29sc1N0YWNrLSR7ZW52aXJvbm1lbnR9YCwge1xuICBlbnY6IGNvbmZpZ1tlbnZpcm9ubWVudCBhcyBrZXlvZiB0eXBlb2YgY29uZmlnXS5lbnYsXG4gIGRvbWFpbjogY29uZmlnW2Vudmlyb25tZW50IGFzIGtleW9mIHR5cGVvZiBjb25maWddLmRvbWFpbixcbiAgaG9zdGVkWm9uZUlkOiBjb25maWdbZW52aXJvbm1lbnQgYXMga2V5b2YgdHlwZW9mIGNvbmZpZ10uaG9zdGVkWm9uZUlkLFxuICBjZXJ0aWZpY2F0ZUFybjogY2VydGlmaWNhdGVTdGFjay5jZXJ0aWZpY2F0ZS5jZXJ0aWZpY2F0ZUFybixcbiAgZW52aXJvbm1lbnQsXG4gIGNyb3NzUmVnaW9uUmVmZXJlbmNlczogdHJ1ZVxufSk7XG5cbmRldlRvb2xzU3RhY2suYWRkRGVwZW5kZW5jeShjZXJ0aWZpY2F0ZVN0YWNrKTtcblxuLy8gR2l0SHViIEFjdGlvbnMgSUFNIFN0YWNrXG5jb25zdCBnaXRodWJBY3Rpb25zU3RhY2sgPSBuZXcgR2l0SHViQWN0aW9uc1N0YWNrKGFwcCwgYEdpdEh1YkFjdGlvbnNTdGFjay0ke2Vudmlyb25tZW50fWAsIHtcbiAgZW52OiBjb25maWdbZW52aXJvbm1lbnQgYXMga2V5b2YgdHlwZW9mIGNvbmZpZ10uZW52LFxuICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQgYXMgJ2RldicgfCAncHJkJyxcbiAgZ2l0aHViUmVwbzogJ2t0ZXIvZGV2LXRvb2xzLXN1aXRlJ1xufSk7Il19